package guiPosts;

import entityClasses.Post;
import entityClasses.Reply;

/**
 * <p><strong>Title:</strong> ModelPosts Class - Student Posts Model</p>
 * 
 * <p><strong>Description:</strong> Model component of the MVC architecture for the student 
 * discussion posts system. This class provides utility methods for formatting posts and 
 * replies for display in the GUI, and parsing IDs from formatted display strings.</p>
 * 
 * <p><strong>MVC Role:</strong> Model - Handles data formatting and transformation between 
 * entity objects (Post, Reply) and display strings shown in the View.</p>
 * 
 * <p><strong>Key Responsibilities:</strong></p>
 * <ul>
 * <li><strong>Display Formatting:</strong> Converts Post/Reply objects to user-friendly strings</li>
 * <li><strong>Role Badge Display:</strong> Adds [Admin], [Role1], or [Role2] badges to posts/replies</li>
 * <li><strong>ID Extraction:</strong> Parses post/reply IDs from formatted display strings</li>
 * <li><strong>Data Transformation:</strong> Bridges the gap between raw entity data and GUI presentation</li>
 * </ul>
 * 
 * <p><strong>Supported User Stories:</strong></p>
 * <ul>
 * <li><strong>US-04 (View Posts):</strong> {@link #formatPostForDisplay(Post)} - Formats posts with role badges</li>
 * <li><strong>US-05 (Replies):</strong> {@link #formatReplyForDisplay(Reply)} - Formats replies with role badges</li>
 * <li><strong>US-02/US-03 (Edit/Delete):</strong> {@link #getID(String)} - Extracts IDs for operations</li>
 * </ul>
 * 
 * <p><strong>Design Pattern:</strong> This class follows the <strong>Utility/Helper pattern</strong> 
 * within the MVC Model layer. All methods are static since they perform stateless data 
 * transformations.</p>
 * 
 * <p><strong>Display Format Standard:</strong></p>
 * <ul>
 * <li><strong>Posts:</strong> <code>"id: X author: username [Role] content: text"</code></li>
 * <li><strong>Replies:</strong> <code>"id: X author: username [Role] content: text"</code></li>
 * <li><strong>Role Badges:</strong> [Admin], [Role1], [Role2], or [Unknown]</li>
 * </ul>
 * 
 * <p><strong>Why Role Badges Matter:</strong></p>
 * <ul>
 * <li><strong>Visual Identification:</strong> Students quickly see who posted (peer vs instructor)</li>
 * <li><strong>Trust Indicators:</strong> [Admin] posts are official announcements</li>
 * <li><strong>TP3 Preparation:</strong> Enables future instructor analytics by role</li>
 * </ul>
 * 
 * <p><strong>Copyright:</strong> Lynn Robert Carter © 2025</p>
 * 
 * @author Team-25
 * @author Lynn Robert Carter
 * @version 2.00 2025-10-26 Added role badge display for TP2
 * @version 1.00 2025-10-12 Initial implementation for TP1
 * 
 * @see guiPosts.ControllerPosts
 * @see guiPosts.ViewPosts
 * @see entityClasses.Post
 * @see entityClasses.Reply
 */
public class ModelPosts {
	
	/**
	 * Extracts the ID number from a formatted post or reply display string.
	 * 
	 * <p><strong>Purpose:</strong> Enables the Controller to identify which post/reply the 
	 * user selected in the ListView, so operations like edit/delete/view-replies can be 
	 * performed on the correct entity.</p>
	 * 
	 * <p><strong>Input Format:</strong> Expects strings formatted as:
	 * <code>"id: 5 author: john_doe [Role1] content: Great question!"</code></p>
	 * 
	 * <p><strong>Parsing Algorithm:</strong></p>
	 * <ol>
	 * <li>Split string on " author: " â†' ["id: 5", "john_doe [Role1] content: ..."]</li>
	 * <li>Take first part: "id: 5"</li>
	 * <li>Split on space â†' ["id:", "5"]</li>
	 * <li>Parse second element as integer â†' 5</li>
	 * </ol>
	 * 
	 * <p><strong>User Story Support:</strong></p>
	 * <ul>
	 * <li><strong>US-02 (Edit):</strong> Extract ID to retrieve Post from database for editing</li>
	 * <li><strong>US-03 (Delete):</strong> Extract ID to identify which post to delete</li>
	 * <li><strong>US-05 (Replies):</strong> Extract post ID to retrieve replies, or reply ID for edit/delete</li>
	 * </ul>
	 * 
	 * <p><strong>Usage Example:</strong></p>
	 * <pre>
	 * // In ControllerPosts.performEditPost():
	 * String selected = "id: 5 author: john [Role1] content: Question about...";
	 * int postId = ModelPosts.getID(selected);  // Returns: 5
	 * Post post = database.getPost(postId);     // Retrieve the actual post
	 * // Now can perform edit operation
	 * </pre>
	 * 
	 * <p><strong>Error Handling:</strong> Assumes input string is properly formatted. Will 
	 * throw NumberFormatException if format is unexpected. Should only be called with strings 
	 * generated by {@link #formatPostForDisplay(Post)} or {@link #formatReplyForDisplay(Reply)}.</p>
	 * 
	 * <p><strong>Important:</strong> This method works for BOTH posts and replies since they 
	 * use the same display format. The caller determines whether to use the ID for Post or 
	 * Reply operations based on context.</p>
	 * 
	 * @param s the formatted display string from ListView (must follow standard format)
	 * @return the extracted ID number (positive integer)
	 * @throws NumberFormatException if the string format is invalid
	 * 
	 * @see #formatPostForDisplay(Post)
	 * @see #formatReplyForDisplay(Reply)
	 */
    protected static int getID(String s) {
        // Parse "id: X author: Y..." to extract X
        String[] stuff1 = s.split(" author: ");
        String temp = stuff1[0];
        String[] stuff2 = temp.split(" ");
        int id = Integer.parseInt(stuff2[1]);
        return id;
    }
    
    /**
     * Formats a Post object for display in the ListView with role badge.
     * 
     * <p><strong>Implements:</strong> US-04 (View Posts) - Display formatting</p>
     * 
     * <p><strong>Output Format:</strong> 
     * <code>"id: X author: username [Role] content: post text"</code></p>
     * 
     * <p><strong>Example Outputs:</strong></p>
     * <pre>
     * "id: 5 author: prof_smith [Admin] content: Assignment deadline extended"
     * "id: 12 author: john_doe [Role1] content: How does recursion work?"
     * "id: 8 author: jane_smith [Role2] content: Here's my solution approach..."
     * "id: 3 author: legacy_user [Unknown] content: Old post from before roles"
     * </pre>
     * 
     * <p><strong>Role Badge Logic:</strong></p>
     * <ul>
     * <li>If post.getAuthorRole() is not null â†' use that role</li>
     * <li>If post.getAuthorRole() is null â†' default to "Unknown"</li>
     * <li>Null check prevents NullPointerException for legacy posts</li>
     * </ul>
     * 
     * <p><strong>Why Null Checking is Critical:</strong> Posts created before role tracking 
     * was implemented (earlier versions) may have null authorRole. Defaulting to "Unknown" 
     * ensures the GUI displays properly without crashes.</p>
     * 
     * <p><strong>User Story Satisfaction:</strong> US-04 requires viewing all posts with 
     * clear attribution. This format provides:</p>
     * <ul>
     * <li>Unique identifier (id) for reference in discussions</li>
     * <li>Author name for attribution</li>
     * <li>Role badge for context (peer vs instructor)</li>
     * <li>Content for reading the actual discussion</li>
     * </ul>
     * 
     * <p><strong>Visual Benefits:</strong></p>
     * <ul>
     * <li><strong>[Admin]:</strong> Immediately recognizable as official announcement</li>
     * <li><strong>[Role1]/[Role2]:</strong> Shows peer contributions from different groups</li>
     * <li><strong>[Unknown]:</strong> Indicates legacy content, no role info available</li>
     * </ul>
     * 
     * <p><strong>Data Flow:</strong></p>
     * <pre>
     * Database â†' Post object â†' formatPostForDisplay() â†' display string â†' ListView
     * </pre>
     * 
     * @param post the Post entity object to format (must not be null)
     * @return formatted display string with id, author, role badge, and content
     * 
     * @see entityClasses.Post
     * @see guiPosts.ControllerPosts#performViewPosts()
     */
    protected static String formatPostForDisplay(Post post) {
        // Get role, defaulting to "Unknown" if null (legacy posts)
        String role = post.getAuthorRole() != null ? post.getAuthorRole() : "Unknown";
        
        // Build formatted string with role badge in brackets
        return "id: " + post.getPostID() + 
               " author: " + post.getAuthor() + 
               " [" + role + "] " +
               "content: " + post.getContent();
    }
    
    /**
     * Formats a Reply object for display in the ListView with role badge.
     * 
     * <p><strong>Implements:</strong> US-05 (Replies) - Display formatting</p>
     * 
     * <p><strong>Output Format:</strong> 
     * <code>"id: X author: username [Role] content: reply text"</code></p>
     * 
     * <p><strong>Example Outputs:</strong></p>
     * <pre>
     * "id: 15 author: john_doe [Role1] content: Thanks for the clarification!"
     * "id: 16 author: jane_smith [Role2] content: I found this helpful too"
     * "id: 17 author: prof_smith [Admin] content: Great question, here's more detail..."
     * </pre>
     * 
     * <p><strong>Format Consistency:</strong> Uses identical format to posts for UI consistency. 
     * Users see the same structure whether viewing posts or replies, making the interface 
     * intuitive and predictable.</p>
     * 
     * <p><strong>Role Badge Logic:</strong> Same null-checking as posts. Defaults to "Unknown" 
     * if reply.getAuthorRole() returns null (legacy replies).</p>
     * 
     * <p><strong>User Story Satisfaction:</strong> US-05 requires viewing replies in discussion 
     * threads. This format provides clear attribution and role identification for each reply 
     * in the conversation.</p>
     * 
     * <p><strong>Thread Context:</strong> When viewing replies, these formatted strings appear 
     * in a ListView below the original post, creating a readable discussion thread.</p>
     * 
     * <p><strong>Data Flow:</strong></p>
     * <pre>
     * Database â†' List&lt;Reply&gt; â†' formatReplyForDisplay() for each â†' display strings â†' ListView
     * </pre>
     * 
     * @param reply the Reply entity object to format (must not be null)
     * @return formatted display string with id, author, role badge, and content
     * 
     * @see entityClasses.Reply
     * @see guiPosts.ControllerPosts#performViewReplies()
     */
    protected static String formatReplyForDisplay(Reply reply) {
        // Get role, defaulting to "Unknown" if null (legacy replies)
        String role = reply.getAuthorRole() != null ? reply.getAuthorRole() : "Unknown";
        
        // Build formatted string with role badge in brackets
        return "id: " + reply.getReplyID() + 
               " author: " + reply.getAuthor() + 
               " [" + role + "] " +
               "content: " + reply.getContent();
    }
}